TP53_sites_ext_inBait
index
index = as.integer(base::strsplit(TFBSs_covered[current], "_")[[1]][2])
TP53_sites_ext_inBait[index]
SingleSiteMeth = CallContextMethylation(sampleSheet = Qinput, sample = MySample[1], genome = BSgenome.Mmusculus.UCSC.mm10, range = TP53_sites_ext_inBait[index], returnSM = FALSE)
SingleSiteMeth = CallContextMethylation(sampleSheet = Qinput, sample = MySample[1], genome = BSgenome.Mmusculus.UCSC.mm10, range = top500scores[index], returnSM = FALSE)
TP53_sites
top500scores[index]
TP53_sites[[names(top500scores[index])]]
TP53_sites[names(top500scores[index])]
SingleSiteMeth
PlotAvgSMF(MethGR = SingleSiteMeth, range = top500scores[index], TFBSs = TP53_sites[names(top500scores[index])])
names(top500scores[index])
pdf(paste0("/g/krebs/barzaghi/analyses/misc/TP53_check/SingleSite_TP53_", names(top500scores[index])))
PlotAvgSMF(MethGR = SingleSiteMeth, range = top500scores[index], TFBSs = TP53_sites[names(top500scores[index])])
dev.off()
pdf(paste0("/g/krebs/barzaghi/analyses/misc/TP53_check/SingleSite_TP53_", names(top500scores[index]), ".pdf"))
PlotAvgSMF(MethGR = SingleSiteMeth, range = top500scores[index], TFBSs = TP53_sites[names(top500scores[index])])
dev.off()
TFBSs_covered
seq(1, 100, 13)
TFBSs_covered
sample(1:length(TFBSs_covered), 7, replace = F)
for (current in sample(1:length(TFBSs_covered), 7, replace = F)){
index = as.integer(base::strsplit(TFBSs_covered[current], "_")[[1]][2])
SingleSiteMeth = CallContextMethylation(sampleSheet = Qinput, sample = MySample[1], genome = BSgenome.Mmusculus.UCSC.mm10, range = top500scores[index], returnSM = FALSE)
pdf(paste0("/g/krebs/barzaghi/analyses/misc/TP53_check/SingleSite_TP53_", names(top500scores[index]), ".pdf"))
PlotAvgSMF(MethGR = SingleSiteMeth, range = top500scores[index], TFBSs = TP53_sites[names(top500scores[index])])
dev.off()
}
devtools::load_all()
library(BSgenome.Mmusculus.UCSC.mm10)
library(SingleMoleculeFootprinting)
Qinput = system.file("extdata", "QuasR_input_pairs.txt", package = "SingleMoleculeFootprinting", mustWork = T)
suppressMessages(readr::read_delim(Qinput, delim = "\t"))
MySample = suppressMessages(readr::read_delim(Qinput, delim = "\t")[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2)
PlotSM(MethSM = Methylation[[2]], range = Region_of_interest, SortedReads = "HC")
pdf("HC_SM.pdf")
PlotSM(MethSM = Methylation[[2]], range = Region_of_interest, SortedReads = "HC")
dev.off()
pdf("HC_SM.pdf")
PlotSM(MethSM = Methylation[[2]], range = Region_of_interest, SortedReads = "HC")
dev.off()
devtools::load_all()
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd",
output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes",
output_format = "html_document")
library(SingleMoleculeFootprinting)
library(BSgenome.Mmusculus.UCSC.mm10)
Qinput = system.file("extdata", "QuasR_input_pairs.txt", package = "SingleMoleculeFootprinting", mustWork = T)
MySample = suppressMessages(readr::read_delim(Qinput, delim = "\t")[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.8)
MethSM = Methylation[[2]]
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
dim(MethSM)
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
hc
ConvRate.thr = 0.8)
MethSM = Methylation[[2]]
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
library(SingleMoleculeFootprinting)
library(BSgenome.Mmusculus.UCSC.mm10)
Qinput = system.file("extdata", "QuasR_input_pairs.txt", package = "SingleMoleculeFootprinting", mustWork = T)
MySample = suppressMessages(readr::read_delim(Qinput, delim = "\t")[[2]])
Region_of_interest = GRanges(seqnames = "chr6", ranges = IRanges(start = 88106000, end = 88106500), strand = "*")
Methylation = CallContextMethylation(sampleSheet = Qinput,
sample = MySample,
genome = BSgenome.Mmusculus.UCSC.mm10,
range = Region_of_interest,
coverage = 20,
ConvRate.thr = 0.2) # 0.2 w/ v 3.6.2 | 0.8 w/ v 4.1.0
MethSM = Methylation[[2]]
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance) # <----
while(TRUE){
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
hc=hclust(distance)
}
MethSM_subset
distance = dist(MethSM_subset)
hc=hclust(distance)
MethSM_subset
distance
distance[1:10,1:10]
dim(distance)
distance
head(distance)
hc=hclust(distance)
length(distance)
healthyMeth = MethSM[sample(dimnames(MethSM)[[1]],500),]
healthydistance = dist(healthyMeth)
hc=hclust(healthydistance)
healthyMeth
colMeans(MethSM_subset)
colMeans(healthyMeth)
dim(MethSM_subset)
dim(healthyMeth)
length(distance)
length(healthydistance)
mean(distance)
mean(healthydistance)
sum(is.na(distance))
sum(is.na((healthydistance))
)
which(is.na(distance))
colMeans(MethSM_subset, na.rm = TRUE)
colMeans(healthyMeth, na.rm = TRUE)
rowMeans(MethSM_subset, na.rm = TRUE)
sum(is.na(rowMeans(MethSM_subset, na.rm = TRUE)))
sum(is.na(rowMeans(healthyMeth, na.rm = TRUE)))
?complete.cases()
?complete.cases
rowMeans(is.na(MethSM_subset))
rowMeans(is.na(MethSM_subset)) == 1
sum(rowMeans(is.na(MethSM_subset)) == 1)
is.na(MethSM_subset)[1:10,1:10]
rowMeans(is.na(MethSM_subset)[1:10,1:10])
rowSums(is.na(MethSM_subset)[1:10,1:10])
is.na(MethSM_subset)[1:10,1:20]
is.na(MethSM_subset)[1:20,1:10]
is.na(MethSM_subset)[30:50,1:10]
rowMeans(is.na(MethSM_subset)[30:50,1:10])
rowMeans(is.na(MethSM_subset)[30:50,1:10]) > 0.9
#
rowMeans(is.na(MethSM_subset)) > 0.9
#
sum(rowMeans(is.na(MethSM_subset)) > 0.9)
#
sum(rowMeans(is.na(MethSM_subset)) > 0.5)
sum(rowMeans(is.na(healthydistance)) > 0.5)
sum(rowMeans(is.na(healthydistance)) > 0.5)
sum(rowMeans(is.na(MethSM_subset)) > 0.5)
sum(rowMeans(is.na(healthyMeth)) > 0.5)
#
sum(rowMeans(is.na(MethSM_subset)) > 0.9)
sum(rowMeans(is.na(healthyMeth)) > 0.9)
sum(rowMeans(is.na(MethSM_subset)) == 1)
sum(rowMeans(is.na(healthyMeth)) == 1)
sum(is.na(healthydistance))
sum(is.na(distance))
length(distance)
nrow(MethSM_subset)
(500*499)/2
which(is.na(distance))
?dist
distance = dist(MethSM_subset)
which(is.na(distance))
which(is.na(rowMeans(MethSM_subset)))
#
sum(rowMeans(is.na(MethSM_subset)) == 1)
sum(is.na(distance)) > 0
devtools::load_all()
while(TRUE){
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
while(sum(is.na(distance)) > 0){ # sometimes dist between some pair of reads is NA, possibly because of no overlapping Cs
print("again")
distance = dist(MethSM_subset)
}
hc=hclust(distance)
print("this worked")
}
while(TRUE){
if(nrow(MethSM) > 500){ #subset to 500 molecules to avoid problem with Hc
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
}else{
MethSM_subset = MethSM
}
distance = dist(MethSM_subset)
while(sum(is.na(distance)) > 0){ # sometimes dist between some pair of reads is NA, possibly because of no overlapping Cs
print("again")
MethSM_subset = MethSM[sample(dimnames(MethSM)[[1]],500),]
distance = dist(MethSM_subset)
}
hc=hclust(distance)
print("this worked")
}
rmarkdown::render("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes/SingleMoleculeFootprinting.Rmd",
output_dir = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/vignettes",
output_format = "html_document")
#### bait regions bed --> GRanges
BaitRegions = import(system.file("extdata", "mm10_baits.bed.gz", package = "SingleMoleculeFootprinting", mustWork = T), format="bed")
#### bait regions bed --> GRanges
BaitRegions = rtracklayer::import(system.file("extdata", "mm10_baits.bed.gz", package = "SingleMoleculeFootprinting", mustWork = T), format="bed")
BaitRegions
unique(BaitRegions$name)
unique(BaitRegions$score)
seqlevels(BaitRegions) = paste0("chr", seqlevels(BaitRegions))
#### bait regions bed --> GRanges
library(GenomicRanges)
seqlevels(BaitRegions) = paste0("chr", seqlevels(BaitRegions))
BaitRegions
saveRDS(BaitRegions, "/g/krebs/barzaghi/Rscripts/R_package/BaitRegions_mm10.rds")
AllC = readRDS("../AllCreduced.rds")
AllC
ReducedRefMat = readRDS("../ReducedRefMat.rds")
ReducedRefMat[1:10,1:10]
ReducedRefMat
data.class(ReducedRefMat)
data.class(AllC)
data.class(BaitRegions)
colnames(ReducedRefMat)
BiocManager::install("BiocCheck")
BiocManager::install("BiocCheck")
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::load_all()
BiocCheck::BiocCheck()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::document()
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::document()
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::document()
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
BiocCheck::BiocCheck()
devtools::document()
devtools::load_all()
# devtools::test()
# devtools::check()
BiocCheck::BiocCheck()
devtools::load_all()
# devtools::test()
# devtools::check()
BiocCheck::BiocCheck()
VectorizeReads
devtools::document()
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
# devtools::test()
# devtools::check()
BiocCheck::BiocCheck()
devtools::document()
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::document(pkg = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
devtools::document(pkg = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
# devtools::test()
# devtools::check()
BiocCheck::BiocCheck()
devtools::document()
devtools::install("/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprinting/")
# devtools::test()
# devtools::check()
BiocCheck::BiocCheck()
# devtools::test()
# devtools::check()
BiocCheck::BiocCheck()
# devtools::test()
# devtools::check()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::load_all()
devtools::load_all()
#SingleMoleculeFootprintingData::EnrichmentRegions_mm10.rds()
devtools::load_all()
ExperimentHub::listResources(package = "../SingleMoleculeFootprintingData/")
ExperimentHub::listResources(package = "../SingleMoleculeFootprintingData")
ExperimentHub::listResources(package = "SingleMoleculeFootprintingData")
ExperimentHub::listResources(package = "/g/krebs/barzaghi/Rscripts/R_package/SingleMoleculeFootprintingData")
library(ExperimentHub)
eh = ExperimentHub()
query(eh, "SingleMoleculeFootprintingData")
SMFdata = query(eh, "SingleMoleculeFootprintingData")
ExperimentHub::listResources(hub = SMFdata)
ExperimentHub::listResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::getExperimentHubOption()
ExperimentHub::loadResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::loadResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::cache()
?ExperimentHub::cache()
?ExperimentHub::cache
ExperimentHub::cache("SingleMoleculeFootprintingData")
ExperimentHub::listResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::cache("NRF1pair.bam")
ExperimentHub::cache(SMFdata)
ExperimentHub::loadResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::getExperimentHubOption()
ExperimentHub::getExperimentHubOption("URL")
ExperimentHub::getExperimentHubOption(c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK"))
ExperimentHub::getExperimentHubOption("CACHE") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::getExperimentHubOption("MAX_DOWNLOADS") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::getExperimentHubOption("PROXY") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::getExperimentHubOption("LOCAL") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::getExperimentHubOption("ASK") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
.libPaths()
ExperimentHub::cache(SMFdata)
ExperimentHub::listResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::listResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::listResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::getExperimentHubOption("CACHE")
list.files(path = .libPaths())
list.files(path = .libPaths()[1])
.libPaths()[1]
ExperimentHub::setExperimentHubOption(arg = "CACHE", value = .libPaths()[1])
ExperimentHub::getExperimentHubOption("CACHE") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::loadResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::setExperimentHubOption(arg = "CACHE", value = paste0(.libPaths()[1], "/SingleMoleculeFootprintingData_cache"))
ExperimentHub::loadResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::getExperimentHubOption("CACHE") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::cache(SMFdata)
.libPaths()[1]
ExperimentHub::getExperimentHubOption("ASK") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::getExperimentHubOption("LOCAL") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
ExperimentHub::getExperimentHubOption("URL") #c("URL", "CACHE", "MAX_DOWNLOADS", "PROXY", "LOCAL", "ASK")
CacheDir = paste0(.libPaths()[1], "/SingleMoleculeFootprintingData_cache")
dir.create(CacheDir)
ExperimentHub::setExperimentHubOption(arg = "CACHE", value = CacheDir)
ExperimentHub::loadResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::listResources()
ExperimentHub::listResources(package = "SingleMoleculeFootprintingData")
ExperimentHub::listResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
ExperimentHub::listResources(hub = SMFdata, package = "SingleMoleculeFootprintingData", filterBy = "NRF1pair.bam")
ExperimentHub::cache(x = "SingleMoleculeFootprintingData")
ExperimentHub::cache(x = SMFdata)
ExperimentHub::listResources(hub = eh, package = "SingleMoleculeFootprintingData", filterBy = "NRF1pair.bam")
ExperimentHub::cache(x = eh)
ExperimentHub::listResources(hub = eh)
ExperimentHub::listResources(hub = eh, package = "SingleMoleculeFootprintingData")
ExperimentHub::getExperimentHubOption("CACHE")
list.files(ExperimentHub::getExperimentHubOption("CACHE"))
list.files(ExperimentHub::getExperimentHubOption("CACHE"), ".rds")
(list.files(ExperimentHub::getExperimentHubOption("CACHE"), ".rds", full.names = TRUE))
readRDS(list.files(ExperimentHub::getExperimentHubOption("CACHE"), ".rds", full.names = TRUE))
Index =readRDS(list.files(ExperimentHub::getExperimentHubOption("CACHE"), ".rds", full.names = TRUE))
Index
remove(Index)
ExperimentHub::cache(CacheDir)
ExperimentHub::cache(SMFdata)
?ExperimentHub::cache
?ExperimentHub
ExperimentHub::hubCache()
hubCache()
hubCache(SMFdata)
recordStatus(SMFdata)
ExperimentHub::listResources(SMFdata, "SingleMoleculeFootprintingData")
recordStatus(SMFdata, "NRF1pair.bam")
ExperimentHub::ExperimentHub()
CacheDir = paste0(.libPaths()[1], "/SingleMoleculeFootprintingData_cache")
dir.create(CacheDir)
ExperimentHub::setExperimentHubOption(arg = "CACHE", value = CacheDir)
eh = ExperimentHub()
SMFdata = query(eh, "SingleMoleculeFootprintingData")
ExperimentHub::listResources(SMFdata, "SingleMoleculeFootprintingData")
hubCache(x = SMFdata)
recordStatus(hub = SMFdata, record = "NRF1pair.bam")
hubCache(x = SMFdata)
names(x = SMFdata)
fileName(object = SMFdata)
AnnotationHub::mcols(x = SMFdata)
removeCache(SMFdata)
s
removeCache(SMFdata)
hubCache(x = SMFdata)
.libPaths()[1]
CacheDir = paste0(.libPaths()[1], "/SingleMoleculeFootprintingData_cache")
dir.create(CacheDir)
ExperimentHub::setExperimentHubOption(arg = "CACHE", value = CacheDir)
eh = ExperimentHub()
SMFdata = query(eh, "SingleMoleculeFootprintingData")
ExperimentHub::loadResources(hub = SMFdata, package = "SingleMoleculeFootprintingData")
hubCache(x = SMFdata)
names(x = SMFdata)
fileName(object = SMFdata)
AnnotationHub::mcols(x = SMFdata)
recordStatus(hub = SMFdata, record = "NRF1pair.bam")
AnnotationHub::mcols(x = SMFdata)
fileName(object = SMFdata)
AnnotationHub::mcols(x = SMFdata)
names(AnnotationHub::mcols(x = SMFdata))
rownames(AnnotationHub::mcols(x = SMFdata))
DF = AnnotationHub::mcols(x = SMFdata)
DF[1,1]
remove(DF)
RecordID = rownames(AnnotationHub::mcols(x = SMFdata))[1]
RecordID
fileName(object = SMFdata)
fileName(object = SMFdata)==RecordID
names(fileName(object = SMFdata))==RecordID
fileName(object = SMFdata)[names(fileName(object = SMFdata))==RecordID]
fileName(object = SMFdata)[names(fileName(object = SMFdata))==RecordID][[1]]
fileName(object = SMFdata)[,names(fileName(object = SMFdata))==RecordID]
fileName(object = SMFdata)[names(fileName(object = SMFdata))==RecordID][[1]]
AnnotationHub::mcols(x = SMFdata)
data.frame(
FileName = fileName(object = SMFdata)[names(fileName(object = SMFdata))==RecordID][[1]],
SampleName = "NRF1pair"
)
data.frame(
FileName = fileName(object = SMFdata)[names(fileName(object = SMFdata))==RecordID][[1]],
SampleName = "NRF1pair"
) -> df
readr::write_delim(df, "../AWH_Qinput.txt", delim = "\t")
library(BSgenome.Mmusculus.UCSC.mm10)
prj = QuasR::qAlign(sampleFile = "../AWH_Qinput.txt",,
genome = "BSgenome.Mmusculus.UCSC.mm10",
aligner = "Rbowtie",
projectName = "prj",
paired = "fr",
bisulfite = "undir")
SingleMoleculeFootprintingData::NRF1pair.bam()
SMFdata
SMFdata$ah_id
SMFdata$title
SMFdata$dataprovider
SMFdata$rdatadateadded
SMFdata$preparerclass
SMFdata$sourceurl
SMFdata$sourcetype
SMFdata@.db_path
SMFdata@hub
SMFdata@cache
SMFdata@isLocalHub
SMFdata@.db_path
SMFdata@.db_index
SMFdata@.db_uid
